# panicle data
poar.clim_seasonal %>%
subset( flowerN_t1 > 0 & tillerN_t1 > 0 )%>%
dplyr::select( census.year, Code, site, Block, Sex,
Longitude, Latitude,
tillerN_t1, flowerN_t1,zpptgrow,zpptdorm,ztempgrow,ztempdorm,site)%>%
na.omit %>%
mutate( site = site %>% as.factor %>% as.numeric,
Block = Block %>% as.factor %>% as.numeric,
Sex= Sex %>% as.factor %>% as.numeric,
source = Code %>% as.factor %>% as.numeric,
panic_t1 = flowerN_t1) %>%
mutate(
log_size_t1 = log(tillerN_t1),
z_ppt_t1_grow = zpptgrow,
z_ppt_t1_dorm = zpptdorm ,
z_temp_t1_grow = ztempgrow ,
z_temp_t1_dorm = ztempdorm )->poarclim_seasonal.panic
#seed viability and germination
viabVr <- read.csv("https://www.dropbox.com/s/jfkgoxgv8o1fgqx/viability.csv?dl=1")
# seed viability
viabVr %>%
dplyr::select( plot, totS, yesMaybe, sr_f ) %>%
dplyr::rename( SR        = sr_f,
y_viab = yesMaybe,
tot_seeds_viab = totS) %>%
dplyr::select(y_viab, tot_seeds_viab, SR ) %>%
na.omit ->viab
# seed germination
viabVr %>%
dplyr::select( plot, germTot, germFail, sr_f ) %>%
dplyr::rename( SR        = sr_f,
y_germ    = germTot ) %>%
mutate(tot_seeds_germ = y_germ + germFail ) %>%
dplyr::select(y_germ, tot_seeds_germ, SR ) %>%
na.omit->germ
# seeds per panicle
viabVr %>%
dplyr::select(SeedN)  %>%
na.omit->seeds
# Vital rates information ----
fit_allsites_season <- readRDS(url("https://www.dropbox.com/scl/fi/1sbhjorfv15ianvdwli96/fit_1.5_0.5.rds?rlkey=rm9sxy29qzc7himps7n6y0xw6&dl=1")) #ignore warning from readRDS
# pull out stan coefficients
poar <- poar.clim_seasonal
fit_full <- fit_allsites_season
surv_coef <- rstan::extract(fit_full, pars = quote_bare(b0_s,bsizesex_s,btempdormpptdorm_s,btempgrowpptgrow_s,bsex_s,
bsize_s,bpptgrow_s,bpptdorm_s,btempgrow_s,btempdorm_s,
bpptgrowsex_s,bpptdormsex_s,btempgrowsex_s,btempdormsex_s,
btempdormpptdormsex_s,btempgrowpptgrowsex_s,bpptgrow2_s,
bpptdorm2_s,btempgrow2_s,btempdorm2_s,bpptgrow2sex_s,bpptdorm2sex_s,
btempgrow2sex_s,btempdorm2sex_s,
site_tau_s,block_tau_s,source_tau_s))
grow_coef <- rstan::extract(fit_full, pars = quote_bare(b0_g,btempdormpptdorm_g,btempgrowpptgrow_g,bsizesex_g,bsex_g,
bsize_g,bpptgrow_g,bpptdorm_g,btempgrow_g,btempdorm_g,bpptgrowsex_g,
bpptdormsex_g,btempgrowsex_g,btempdormsex_g,btempdormpptdormsex_g,
btempgrowpptgrowsex_g,bpptgrow2_g,bpptdorm2_g,btempgrow2_g,btempdorm2_g,
bpptgrow2sex_g,bpptdorm2sex_g,btempgrow2sex_g,btempdorm2sex_g,
site_tau_g,block_tau_g,source_tau_g,sigma))
flow_coef <- rstan::extract(fit_full, pars = quote_bare(b0_f,bsizesex_f,bsex_f, bsize_f,bpptgrow_f,bpptdorm_f,btempgrow_f,
btempdorm_f,bpptgrowsex_f,bpptdormsex_f,btempgrowsex_f,btempdormsex_f,
btempdormpptdorm_f,btempgrowpptgrow_f,btempdormpptdormsex_f,
btempgrowpptgrowsex_f,bpptgrow2_f,bpptdorm2_f,btempgrow2_f,
btempdorm2_f,bpptgrow2sex_f,bpptdorm2sex_f,btempgrow2sex_f,btempdorm2sex_f,
site_tau_f,block_tau_f,source_tau_f))
panic_coef <- rstan::extract(fit_full, pars = quote_bare(b0_p,bsex_p,bsex_p,bsizesex_p, bsize_p,bpptgrow_p,bpptdorm_p,
btempgrow_p,btempdorm_p,bpptgrowsex_p,bpptdormsex_p,btempgrowsex_p,
btempdormsex_p,btempdormpptdorm_p,btempgrowpptgrow_p,btempdormpptdormsex_p,
btempgrowpptgrowsex_p,bpptgrow2_p,bpptdorm2_p,btempgrow2_p,
btempdorm2_p,bpptgrow2sex_p,bpptdorm2sex_p,btempgrow2sex_p,btempdorm2sex_p,
site_tau_p,block_tau_p,source_tau_p))
via_coef <- rstan::extract(fit_full, pars = quote_bare(v0,a_v,m,lambda_d))
# Matrix model (lambda vs climate)----
##load MPM functions
source("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/twosexMPMLTRE.R")
# source("/Users/tm9/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/Analysis/twosexMPMLTRE.R")
## read in the seedling survival data from Poa autumnalis
POAU <- read.csv("https://www.dropbox.com/s/7f2yfz49fzrcp5i/POAU.csv?dl=1")
sdlg_surv <- POAU %>% filter(year_recruit==year_t) %>% summarise(sdlg_surv = mean(spring_survival_t1,na.rm=T))
## pull out mean stan coefficients
mean_coefs<- lapply(rstan::extract(fit_full, pars = quote_bare(b0_s,bsizesex_s,btempdormpptdorm_s,btempgrowpptgrow_s,bsex_s,
bsize_s,bpptgrow_s,bpptdorm_s,btempgrow_s,btempdorm_s,
bpptgrowsex_s,bpptdormsex_s,btempgrowsex_s,btempdormsex_s,
btempdormpptdormsex_s,btempgrowpptgrowsex_s,bpptgrow2_s,
bpptdorm2_s,btempgrow2_s,btempdorm2_s,bpptgrow2sex_s,bpptdorm2sex_s,
btempgrow2sex_s,btempdorm2sex_s,
site_tau_s,block_tau_s,source_tau_s)) ,mean)
mean_coefg<- lapply(rstan::extract(fit_full, pars = quote_bare(b0_g,btempdormpptdorm_g,btempgrowpptgrow_g,bsizesex_g,bsex_g,
bsize_g,bpptgrow_g,bpptdorm_g,btempgrow_g,btempdorm_g,bpptgrowsex_g,
bpptdormsex_g,btempgrowsex_g,btempdormsex_g,btempdormpptdormsex_g,
btempgrowpptgrowsex_g,bpptgrow2_g,bpptdorm2_g,btempgrow2_g,
btempdorm2_g,bpptgrow2sex_g,bpptdorm2sex_g,btempgrow2sex_g,btempdorm2sex_g,
site_tau_g,block_tau_g,source_tau_g,sigma)) ,mean)
mean_coeff<- lapply(rstan::extract(fit_full, pars = quote_bare(b0_f,bsizesex_f,bsex_f, bsize_f,bpptgrow_f,bpptdorm_f,btempgrow_f,
btempdorm_f,bpptgrowsex_f,bpptdormsex_f,btempgrowsex_f,btempdormsex_f,
btempdormpptdorm_f,btempgrowpptgrow_f,btempdormpptdormsex_f,
btempgrowpptgrowsex_f,bpptgrow2_f,bpptdorm2_f,btempgrow2_f,
btempdorm2_f,bpptgrow2sex_f,bpptdorm2sex_f,btempgrow2sex_f,btempdorm2sex_f,
site_tau_f,block_tau_f,source_tau_f)) ,mean)
mean_coefp<- lapply(rstan::extract(fit_full, pars = quote_bare(b0_p,bsex_p,bsex_p,bsizesex_p, bsize_p,bpptgrow_p,bpptdorm_p,
btempgrow_p,btempdorm_p,bpptgrowsex_p,bpptdormsex_p,btempgrowsex_p,
btempdormsex_p,btempdormpptdorm_p,btempgrowpptgrow_p,btempdormpptdormsex_p,
btempgrowpptgrowsex_p,bpptgrow2_p,bpptdorm2_p,btempgrow2_p,
btempdorm2_p,bpptgrow2sex_p,bpptdorm2sex_p,btempgrow2sex_p,btempdorm2sex_p,
site_tau_p,block_tau_p,source_tau_p)) ,mean)
mean_coefv<-lapply(rstan::extract(fit_full, pars = quote_bare(v0,a_v,m,lambda_d)) ,mean)
## Format data for past, present,future to project population viability across space
ppt<-terra::rast(clim_1990_2019[[3]])
study_area<-terra::vect("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/data/USA_vector_polygon/States_shapefile.shp")
study_area <- study_area[(study_area$State_Name %in% c("TEXAS","OKLAHOMA","KANSAS")), ]
plot(study_area)
crop_study_area <- terra::crop(ppt, study_area,mask=TRUE)
crop_study_area_raster<-raster::raster(crop_study_area)
coordinates_study_area<-read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/data/coordinate10_study_area.csv")
coordinates(coordinates_study_area) <- ~ x + y
CRS1 <- CRS("+init=epsg:4326") # WGS 84
crs(coordinates_study_area) <- CRS1
plot(crop_study_area_raster)
plot(study_area,add=T)
plot(coordinates_study_area,add=T)
clim_past_values<-terra::extract(clim_1901_1930,coordinates_study_area)
clim_past_values<-as.data.frame(clim_past_values)
clim_past_values$zpptgrow<-(clim_past_values$pptgrow-mean(poar_2015_2016$pptgrow))/sd(poar_2015_2016$pptgrow)
clim_past_values$ztempgrow<-(clim_past_values$tempgrow-mean(poar_2015_2016$tempgrow))/sd(poar_2015_2016$tempgrow)
clim_past_values$zpptdorm<-(clim_past_values$pptdorm-mean(poar_2015_2016$pptdorm))/sd(poar_2015_2016$pptdorm)
clim_past_values$ztempdorm<-(clim_past_values$tempdorm-mean(poar_2015_2016$tempdorm))/sd(poar_2015_2016$tempdorm)
clim_past_values<-data.frame(clim_past_values,coordinates_study_area)
dim(clim_past_values)
# Present
clim_current_values<-terra::extract(clim_1990_2019,coordinates_study_area)
clim_current_values<-as.data.frame(clim_current_values)
clim_current_values$zpptgrow<-(clim_current_values$pptgrow-mean(poar_2015_2016$pptgrow))/sd(poar_2015_2016$pptgrow)
clim_current_values$ztempgrow<-(clim_current_values$tempgrow-mean(poar_2015_2016$tempgrow))/sd(poar_2015_2016$tempgrow)
clim_current_values$zpptdorm<-(clim_current_values$pptdorm-mean(poar_2015_2016$pptdorm))/sd(poar_2015_2016$pptdorm)
clim_current_values$ztempdorm<-(clim_current_values$tempdorm-mean(poar_2015_2016$tempdorm))/sd(poar_2015_2016$tempdorm)
clim_current_values<-data.frame(clim_current_values,coordinates_study_area)
#dim(clim_current_values)
# Future
clim_miroc_85_values<-terra::extract(clim_miroc_85,coordinates_study_area)
climate_miroc85_values<-data.frame(clim_miroc_85_values)
climate_miroc85_values$zpptgrow<-(climate_miroc85_values$pptgrow-mean(poar_2015_2016$pptgrow))/sd(poar_2015_2016$pptgrow)
climate_miroc85_values$ztempgrow<-(climate_miroc85_values$tempgrow-mean(poar_2015_2016$tempgrow))/sd(poar_2015_2016$tempgrow)
climate_miroc85_values$zpptdorm<-(climate_miroc85_values$pptdorm-mean(poar_2015_2016$pptdorm))/sd(poar_2015_2016$pptdorm)
climate_miroc85_values$ztempdorm<-(climate_miroc85_values$tempdorm-mean(poar_2015_2016$tempdorm))/sd(poar_2015_2016$tempdorm)
climate_miroc85_values<-data.frame(climate_miroc85_values,coordinates_study_area)
# dim(climate_miroc85_values)
clim_miroc_45_values<-terra::extract(clim_miroc_45,coordinates_study_area)
climate_miroc45_values<-data.frame(clim_miroc_45_values)
climate_miroc45_values$zpptgrow<-(climate_miroc45_values$pptgrow-mean(poar_2015_2016$pptgrow))/sd(poar_2015_2016$pptgrow)
climate_miroc45_values$ztempgrow<-(climate_miroc45_values$tempgrow-mean(poar_2015_2016$tempgrow))/sd(poar_2015_2016$tempgrow)
climate_miroc45_values$zpptdorm<-(climate_miroc45_values$pptdorm-mean(poar_2015_2016$pptdorm))/sd(poar_2015_2016$pptdorm)
climate_miroc45_values$ztempdorm<-(climate_miroc45_values$tempdorm-mean(poar_2015_2016$tempdorm))/sd(poar_2015_2016$tempdorm)
climate_miroc45_values<-data.frame(climate_miroc45_values,coordinates_study_area)
# dim(clim_miroc_45_values)
clim_acc_85_values<-terra::extract(clim_access_85,coordinates_study_area)
climate_acc_85_values<-data.frame(clim_acc_85_values)
climate_acc_85_values$zpptgrow<-(climate_acc_85_values$pptgrow-mean(poar_2015_2016$pptgrow))/sd(poar_2015_2016$pptgrow)
climate_acc_85_values$ztempgrow<-(climate_acc_85_values$tempgrow-mean(poar_2015_2016$tempgrow))/sd(poar_2015_2016$tempgrow)
climate_acc_85_values$zpptdorm<-(climate_acc_85_values$pptdorm-mean(poar_2015_2016$pptdorm))/sd(poar_2015_2016$pptdorm)
climate_acc_85_values$ztempdorm<-(climate_acc_85_values$tempdorm-mean(poar_2015_2016$tempdorm))/sd(poar_2015_2016$tempdorm)
climate_acc_85_values<-data.frame(climate_acc_85_values,coordinates_study_area)
clim_acc_45_values<-terra::extract(clim_access_45,coordinates_study_area)
climate_acc_45_values<-data.frame(clim_acc_45_values)
climate_acc_45_values$zpptgrow<-(climate_acc_45_values$pptgrow-mean(poar_2015_2016$pptgrow))/sd(poar_2015_2016$pptgrow)
climate_acc_45_values$ztempgrow<-(climate_acc_45_values$tempgrow-mean(poar_2015_2016$tempgrow))/sd(poar_2015_2016$tempgrow)
climate_acc_45_values$zpptdorm<-(climate_acc_45_values$pptdorm-mean(poar_2015_2016$pptdorm))/sd(poar_2015_2016$pptdorm)
climate_acc_45_values$ztempdorm<-(climate_acc_45_values$tempdorm-mean(poar_2015_2016$tempdorm))/sd(poar_2015_2016$tempdorm)
climate_acc_45_values<-data.frame(climate_acc_45_values,coordinates_study_area)
clim_cmc_85_values<-terra::extract(clim_cmcc_85,coordinates_study_area)
climate_cmc_85_values<-data.frame(clim_cmc_85_values)
climate_cmc_85_values$zpptgrow<-(climate_cmc_85_values$pptgrow-mean(poar_2015_2016$pptgrow))/sd(poar_2015_2016$pptgrow)
climate_cmc_85_values$ztempgrow<-(climate_cmc_85_values$tempgrow-mean(poar_2015_2016$tempgrow))/sd(poar_2015_2016$tempgrow)
climate_cmc_85_values$zpptdorm<-(climate_cmc_85_values$pptdorm-mean(poar_2015_2016$pptdorm))/sd(poar_2015_2016$pptdorm)
climate_cmc_85_values$ztempdorm<-(climate_cmc_85_values$tempdorm-mean(poar_2015_2016$tempdorm))/sd(poar_2015_2016$tempdorm)
climate_cmc_85_values<-data.frame(climate_cmc_85_values,coordinates_study_area)
clim_cmc_45_values<-terra::extract(clim_cmcc_45,coordinates_study_area)
climate_cmc_45_values<-data.frame(clim_cmc_45_values)
climate_cmc_45_values$zpptgrow<-(climate_cmc_45_values$pptgrow-mean(poar_2015_2016$pptgrow))/sd(poar_2015_2016$pptgrow)
climate_cmc_45_values$ztempgrow<-(climate_cmc_45_values$tempgrow-mean(poar_2015_2016$tempgrow))/sd(poar_2015_2016$tempgrow)
climate_cmc_45_values$zpptdorm<-(climate_cmc_45_values$pptdorm-mean(poar_2015_2016$pptdorm))/sd(poar_2015_2016$pptdorm)
climate_cmc_45_values$ztempdorm<-(climate_cmc_45_values$tempdorm-mean(poar_2015_2016$tempdorm))/sd(poar_2015_2016$tempdorm)
climate_cmc_45_values<-data.frame(climate_cmc_45_values,coordinates_study_area)
clim_ces_85_values<-terra::extract(clim_cesm_85,coordinates_study_area)
climate_ces_85_values<-data.frame(clim_ces_85_values)
climate_ces_85_values$zpptgrow<-(climate_ces_85_values$pptgrow-mean(poar_2015_2016$pptgrow))/sd(poar_2015_2016$pptgrow)
climate_ces_85_values$ztempgrow<-(climate_ces_85_values$tempgrow-mean(poar_2015_2016$tempgrow))/sd(poar_2015_2016$tempgrow)
climate_ces_85_values$zpptdorm<-(climate_ces_85_values$pptdorm-mean(poar_2015_2016$pptdorm))/sd(poar_2015_2016$pptdorm)
climate_ces_85_values$ztempdorm<-(climate_ces_85_values$tempdorm-mean(poar_2015_2016$tempdorm))/sd(poar_2015_2016$tempdorm)
climate_ces_85_values<-data.frame(climate_ces_85_values,coordinates_study_area)
clim_ces_45_values<-terra::extract(clim_cesm_45,coordinates_study_area)
climate_ces_45_values<-data.frame(clim_ces_45_values)
climate_ces_45_values$zpptgrow<-(climate_ces_45_values$pptgrow-mean(poar_2015_2016$pptgrow))/sd(poar_2015_2016$pptgrow)
climate_ces_45_values$ztempgrow<-(climate_ces_45_values$tempgrow-mean(poar_2015_2016$tempgrow))/sd(poar_2015_2016$tempgrow)
climate_ces_45_values$zpptdorm<-(climate_ces_45_values$pptdorm-mean(poar_2015_2016$pptdorm))/sd(poar_2015_2016$pptdorm)
climate_ces_45_values$ztempdorm<-(climate_ces_45_values$tempdorm-mean(poar_2015_2016$tempdorm))/sd(poar_2015_2016$tempdorm)
climate_ces_45_values<-data.frame(climate_ces_45_values,coordinates_study_area)
# Population viability  Projection----
# The estimation of the species niche (Probability of lambda being higher than 1) was estimated using a local cluster. Even with that cluster, running the code below will take a while (weeks depending on number of core available on you local machine).
# Creating a “cluster” of CPUs
parallel::detectCores() # found out how many cores are available to simultaneous execute different pieces of a larger computation across multiple computing processors or cores
n.cores <- parallel::detectCores() - 1 # define the number of cores we want to use
my.cluster <- parallel::makeCluster( # create the cluster
n.cores,
type = "FORK" # FORK is for Mac-users. If you use a Window Machine you should use PSOCK instead.
)
print(my.cluster) #check cluster definition (optional)
doParallel::registerDoParallel(cl = my.cluster) #register it to be used by %dopar%
foreach::getDoParRegistered() #check if it is registered (optional)
foreach::getDoParWorkers() #how many workers are available? (optional)
n_post_draws<-100
post_draws <- sample.int(length(surv_coef$b0_s), n_post_draws)
### Past----
clim_past_values_clean<-na.omit(clim_past_values)
clim_past_values_clean<-clim_past_values_clean[1:2,]
clim_past_values_clean
lambda_post_past_2s<-matrix(NA,nrow=n_post_draws,ncol=nrow(clim_past_values_clean))
F_params <- M_params <- list()
Timepast_2s<-system.time(
lambda_post_past_2s<-foreach(p=1:n_post_draws,.combine='rbind') %:%
foreach(l=1:nrow(clim_past_values_clean),.combine='c') %dopar% {
#set up param vectors
## survival
F_params$surv_mu <- surv_coef$b0_s[post_draws[p]]
F_params$surv_size <- surv_coef$bsize_s[post_draws[p]]
F_params$surv_pptgrow <- surv_coef$bpptgrow_s[post_draws[p]]
F_params$surv_pptdorm <- surv_coef$bpptdorm_s[post_draws[p]]
F_params$surv_tempgrow <- surv_coef$btempgrow_s[post_draws[p]]
F_params$surv_tempdorm <- surv_coef$btempdorm_s[post_draws[p]]
F_params$surv_tempgrow_pptgrow<-surv_coef$btempgrowpptgrow_s[post_draws[p]]
F_params$surv_tempdorm_pptdorm<-surv_coef$btempdormpptdorm_s[post_draws[p]]
F_params$surv_pptgrow2<-surv_coef$bpptgrow2_s[post_draws[p]]
F_params$surv_pptdorm2<-surv_coef$bpptdorm2_s[post_draws[p]]
F_params$surv_tempgrow2<-surv_coef$btempgrow2_s[post_draws[p]]
F_params$surv_tempdorm2<-surv_coef$btempdorm2_s[post_draws[p]]
M_params$surv_mu <- surv_coef$b0_s[post_draws[p]] + surv_coef$bsex_s[post_draws[p]]
M_params$surv_size <- surv_coef$bsize_s[post_draws[p]] + surv_coef$bsizesex_s[post_draws[p]]
M_params$surv_pptgrow <- surv_coef$bpptgrow_s[post_draws[p]]  + surv_coef$bpptgrowsex_s[post_draws[p]]
M_params$surv_tempgrow <- surv_coef$btempgrow_s[post_draws[p]] + surv_coef$btempgrowsex_s[post_draws[p]]
M_params$surv_pptdorm <- surv_coef$bpptdorm_s[post_draws[p]] + surv_coef$bpptdormsex_s[post_draws[p]]
M_params$surv_tempdorm <- surv_coef$btempdorm_s[post_draws[p]] + surv_coef$btempdormsex_s[post_draws[p]]
M_params$surv_tempgrow_pptgrow<-surv_coef$btempgrowpptgrow_s[post_draws[p]] + surv_coef$btempgrowpptgrowsex_s[post_draws[p]]
M_params$surv_tempdorm_pptdorm<-surv_coef$btempdormpptdorm_s[post_draws[p]] + surv_coef$btempdormpptdormsex_s[post_draws[p]]
M_params$surv_pptgrow2<-surv_coef$bpptgrow2_s[post_draws[p]] + surv_coef$bpptgrow2sex_s[post_draws[p]]
M_params$surv_tempgrow2<-surv_coef$btempgrow2_s[post_draws[p]] + surv_coef$btempgrow2sex_s[post_draws[p]]
M_params$surv_pptdorm2<-surv_coef$bpptdorm2_s[post_draws[p]] + surv_coef$bpptdorm2sex_s[post_draws[p]]
M_params$surv_tempdorm2<-surv_coef$btempdorm2_s[post_draws[p]] + surv_coef$btempdorm2sex_s[post_draws[p]]
## growth
F_params$grow_mu <- grow_coef$b0_g[post_draws[p]]
F_params$grow_size <- grow_coef$bsize_g[post_draws[p]]
F_params$grow_pptgrow <- grow_coef$bpptgrow_g[post_draws[p]]
F_params$grow_pptdorm <- grow_coef$bpptdorm_g[post_draws[p]]
F_params$grow_tempgrow <- grow_coef$btempgrow_g[post_draws[p]]
F_params$grow_tempdorm <- grow_coef$btempdorm_g[post_draws[p]]
F_params$grow_tempgrow_pptgrow<-grow_coef$btempgrowpptgrow_g[post_draws[p]]
F_params$grow_tempdorm_pptdorm<-grow_coef$btempdormpptdorm_g[post_draws[p]]
F_params$grow_pptgrow2<-grow_coef$bpptgrow2_g[post_draws[p]]
F_params$grow_tempgrow2<-grow_coef$btempgrow2_g[post_draws[p]]
F_params$grow_pptdorm2<-grow_coef$bpptdorm2_g[post_draws[p]]
F_params$grow_tempdorm2<-grow_coef$btempdorm2_g[post_draws[p]]
F_params$sigma_g <- grow_coef$sigma[post_draws[p]]
M_params$grow_mu <- grow_coef$b0_g[post_draws[p]] + grow_coef$bsex_g[post_draws[p]]
M_params$grow_size <- grow_coef$bsize_g[post_draws[p]] + grow_coef$bsizesex_g[post_draws[p]]
M_params$grow_pptgrow <- grow_coef$bpptgrow_g[post_draws[p]]  + grow_coef$bpptgrowsex_g[post_draws[p]]
M_params$grow_pptdorm <- grow_coef$bpptdorm_g[post_draws[p]]  + grow_coef$bpptdormsex_g[post_draws[p]]
M_params$grow_tempgrow <- grow_coef$btempgrow_g[post_draws[p]] + grow_coef$btempgrowsex_g[post_draws[p]]
M_params$grow_tempdorm <- grow_coef$btempdorm_g[post_draws[p]] + grow_coef$btempdormsex_g[post_draws[p]]
M_params$grow_tempgrow_pptgrow<-grow_coef$btempgrowpptgrow_g[post_draws[p]] + grow_coef$btempgrowpptgrowsex_g[post_draws[p]]
M_params$grow_tempdorm_pptdorm<-grow_coef$btempdormpptdorm_g[post_draws[p]] + grow_coef$btempdormpptdormsex_g[post_draws[p]]
M_params$grow_pptgrow2<-grow_coef$bpptgrow2_g[post_draws[p]] + grow_coef$bpptgrow2sex_g[post_draws[p]]
M_params$grow_tempgrow2<-grow_coef$btempgrow2_g[post_draws[p]] + grow_coef$btempgrow2sex_g[post_draws[p]]
M_params$grow_pptdorm2<-grow_coef$bpptdorm2_g[post_draws[p]] + grow_coef$bpptdorm2sex_g[post_draws[p]]
M_params$grow_tempdorm2<-grow_coef$btempdorm2_g[post_draws[p]] + grow_coef$btempdorm2sex_g[post_draws[p]]
M_params$sigma_g <- grow_coef$sigma[post_draws[p]]
## flowering
F_params$flow_mu <- flow_coef$b0_f[post_draws[p]]
F_params$flow_size <- flow_coef$bsize_f[post_draws[p]]
F_params$flow_pptgrow <- flow_coef$bpptgrow_f[post_draws[p]]
F_params$flow_tempgrow <- flow_coef$btempgrow_f[post_draws[p]]
F_params$flow_tempdorm <- flow_coef$btempdorm_f[post_draws[p]]
F_params$flow_pptdorm <- flow_coef$bpptdorm_f[post_draws[p]]
F_params$flow_tempgrow_pptgrow<-flow_coef$btempgrowpptgrow_f[post_draws[p]]
F_params$flow_tempdorm_pptdorm<-flow_coef$btempdormpptdorm_f[post_draws[p]]
F_params$flow_pptgrow2<-flow_coef$bpptgrow2_f[post_draws[p]]
F_params$flow_pptdorm2<-flow_coef$bpptdorm2_f[post_draws[p]]
F_params$flow_tempgrow2<-flow_coef$btempgrow2_f[post_draws[p]]
F_params$flow_tempdorm2<-flow_coef$btempdorm2_f[post_draws[p]]
M_params$flow_mu <- flow_coef$b0_f[post_draws[p]] + flow_coef$bsex_f[post_draws[p]]
M_params$flow_size <- flow_coef$bsize_f[post_draws[p]] + flow_coef$bsizesex_f[post_draws[p]]
M_params$flow_pptgrow <- flow_coef$bpptgrow_f[post_draws[p]]  + flow_coef$bpptgrowsex_f[post_draws[p]]
M_params$flow_tempgrow <- flow_coef$btempgrow_f[post_draws[p]] + flow_coef$btempgrowsex_f[post_draws[p]]
M_params$flow_tempdorm <- flow_coef$btempdorm_f[post_draws[p]] +  flow_coef$btempdormsex_f[post_draws[p]]
M_params$flow_pptdorm <- flow_coef$bpptdorm_f[post_draws[p]] + flow_coef$bpptdormsex_f[post_draws[p]]
M_params$flow_tempgrow_pptgrow<-flow_coef$btempgrowpptgrow_f[post_draws[p]] + flow_coef$btempgrowpptgrowsex_f[post_draws[p]]
M_params$flow_tempdorm_pptdorm<-flow_coef$btempdormpptdorm_f[post_draws[p]] + flow_coef$btempdormpptdormsex_f[post_draws[p]]
M_params$flow_pptgrow2<-flow_coef$bpptgrow2_f[post_draws[p]] + flow_coef$bpptgrow2sex_f[post_draws[p]]
M_params$flow_tempgrow2<-flow_coef$btempgrow2_f[post_draws[p]] + flow_coef$btempgrow2sex_f[post_draws[p]]
M_params$flow_pptdorm2<-flow_coef$bpptdorm2_f[post_draws[p]] +  flow_coef$bpptdorm2sex_f[post_draws[p]]
M_params$flow_tempdorm2<-flow_coef$btempdorm2_f[post_draws[p]] + flow_coef$btempdorm2sex_f[post_draws[p]]
## panicles
F_params$panic_mu <- panic_coef$b0_p[post_draws[p]]
F_params$panic_size <- panic_coef$bsize_p[post_draws[p]]
F_params$panic_pptgrow <- panic_coef$bpptgrow_p[post_draws[p]]
F_params$panic_tempgrow <- panic_coef$btempgrow_p[post_draws[p]]
F_params$panic_tempdorm <- panic_coef$btempdorm_p[post_draws[p]]
F_params$panic_pptdorm <- panic_coef$bpptdorm_p[post_draws[p]]
F_params$panic_tempgrow_pptgrow<-panic_coef$btempgrowpptgrow_p[post_draws[p]]
F_params$panic_tempdorm_pptdorm<-panic_coef$btempdormpptdorm_p[post_draws[p]]
F_params$panic_pptgrow2<-panic_coef$bpptgrow2_p[post_draws[p]]
F_params$panic_tempgrow2<-panic_coef$btempgrow2_p[post_draws[p]]
F_params$panic_pptdorm2<-panic_coef$bpptdorm2_p[post_draws[p]]
F_params$panic_tempdorm2<-panic_coef$btempdorm2_p[post_draws[p]]
M_params$panic_mu <- panic_coef$b0_p[post_draws[p]] + panic_coef$bsex_p[post_draws[p]]
M_params$panic_size <- panic_coef$bsize_p[post_draws[p]] + panic_coef$bsizesex_p[post_draws[p]]
M_params$panic_pptgrow <- panic_coef$bpptgrow_p[post_draws[p]]  + panic_coef$bpptgrowsex_p[post_draws[p]]
M_params$panic_tempgrow <- panic_coef$btempgrow_p[post_draws[p]] + panic_coef$btempgrowsex_p[post_draws[p]]
M_params$panic_tempdorm <- panic_coef$btempdorm_p[post_draws[p]] +  panic_coef$btempdormsex_p[post_draws[p]]
M_params$panic_pptdorm <- panic_coef$bpptdorm_p[post_draws[p]] + panic_coef$bpptdormsex_p[post_draws[p]]
M_params$panic_tempgrow_pptgrow<-panic_coef$btempgrowpptgrow_p[post_draws[p]] + panic_coef$btempgrowpptgrowsex_p[post_draws[p]]
M_params$panic_tempdorm_pptdorm<-panic_coef$btempdormpptdorm_p[post_draws[p]] + panic_coef$btempdormpptdormsex_p[post_draws[p]]
M_params$panic_pptgrow2<-panic_coef$bpptgrow2_p[post_draws[p]] + panic_coef$bpptgrow2sex_p[post_draws[p]]
M_params$panic_tempgrow2<-panic_coef$btempgrow2_p[post_draws[p]] + panic_coef$btempgrow2sex_p[post_draws[p]]
M_params$panic_pptdorm2<-panic_coef$bpptdorm2_p[post_draws[p]] + panic_coef$bpptdorm2sex_p[post_draws[p]]
M_params$panic_tempdorm2<-panic_coef$btempdorm2_p[post_draws[p]] + panic_coef$btempdorm2sex_p[post_draws[p]]
## seed viability and misc fertility params
F_params$v0 <- via_coef$v0[post_draws[p]]
F_params$a_v <- via_coef$a_v[post_draws[p]]
F_params$ov_per_inf <- via_coef$lambda_d[post_draws[p]]
F_params$germ <- via_coef$m[post_draws[p]]
F_params$PSR <- 0.5
## use POAU seedling survival for females and males
F_params$sdlg_surv <- M_params$sdlg_surv <- sdlg_surv$sdlg_surv
## set max size equal between the sexes
F_params$max_size <- M_params$max_size <- round(quantile(na.omit((poar.clim_seasonal$tillerN_t1)),probs=0.95))
## pull out the rfx variances
rfx <- rfx_fun(site_tau_s = surv_coef$site_tau_s[post_draws[p]],
block_tau_s = surv_coef$block_tau_s[post_draws[p]],
source_tau_s = surv_coef$source_tau_s[post_draws[p]],
site_tau_g = grow_coef$site_tau_g[post_draws[p]],
block_tau_g = grow_coef$block_tau_g[post_draws[p]],
source_tau_g = grow_coef$source_tau_g[post_draws[p]],
site_tau_f = flow_coef$site_tau_f[post_draws[p]],
block_tau_f = flow_coef$block_tau_f[post_draws[p]],
source_tau_f = flow_coef$source_tau_f[post_draws[p]],
site_tau_p = panic_coef$site_tau_p[post_draws[p]],
block_tau_p = panic_coef$block_tau_p[post_draws[p]],
source_tau_p = panic_coef$source_tau_p[post_draws[p]])
#Estimation+process error
lambdaSim_delay(F_params=F_params,
M_params=M_params,
grow_perturb=0,
surv_perturb=0,
flow_perturb=0,
fert_perturb=0,
viab_perturb=0,
zpptgrow=clim_past_values_clean[l,5],
ztempgrow=clim_past_values_clean[l,6],
zpptdorm=clim_past_values_clean[l,7],
ztempdorm=clim_past_values_clean[l,8],
rfx = rfx_fun(),
max.yrs = max_yrs)$lambdatracker[max_yrs]
}
)
## Two sex models -----
max_yrs<-30
### Past----
clim_past_values_clean<-na.omit(clim_past_values)
lambda_post_past_2s<-matrix(NA,nrow=n_post_draws,ncol=nrow(clim_past_values_clean))
F_params <- M_params <- list()
Timepast_2s<-system.time(
lambda_post_past_2s<-foreach(p=1:n_post_draws,.combine='rbind') %:%
foreach(l=1:nrow(clim_past_values_clean),.combine='c') %dopar% {
#set up param vectors
## survival
F_params$surv_mu <- surv_coef$b0_s[post_draws[p]]
F_params$surv_size <- surv_coef$bsize_s[post_draws[p]]
F_params$surv_pptgrow <- surv_coef$bpptgrow_s[post_draws[p]]
F_params$surv_pptdorm <- surv_coef$bpptdorm_s[post_draws[p]]
F_params$surv_tempgrow <- surv_coef$btempgrow_s[post_draws[p]]
F_params$surv_tempdorm <- surv_coef$btempdorm_s[post_draws[p]]
F_params$surv_tempgrow_pptgrow<-surv_coef$btempgrowpptgrow_s[post_draws[p]]
F_params$surv_tempdorm_pptdorm<-surv_coef$btempdormpptdorm_s[post_draws[p]]
F_params$surv_pptgrow2<-surv_coef$bpptgrow2_s[post_draws[p]]
F_params$surv_pptdorm2<-surv_coef$bpptdorm2_s[post_draws[p]]
F_params$surv_tempgrow2<-surv_coef$btempgrow2_s[post_draws[p]]
F_params$surv_tempdorm2<-surv_coef$btempdorm2_s[post_draws[p]]
M_params$surv_mu <- surv_coef$b0_s[post_draws[p]] + surv_coef$bsex_s[post_draws[p]]
M_params$surv_size <- surv_coef$bsize_s[post_draws[p]] + surv_coef$bsizesex_s[post_draws[p]]
M_params$surv_pptgrow <- surv_coef$bpptgrow_s[post_draws[p]]  + surv_coef$bpptgrowsex_s[post_draws[p]]
M_params$surv_tempgrow <- surv_coef$btempgrow_s[post_draws[p]] + surv_coef$btempgrowsex_s[post_draws[p]]
M_params$surv_pptdorm <- surv_coef$bpptdorm_s[post_draws[p]] + surv_coef$bpptdormsex_s[post_draws[p]]
M_params$surv_tempdorm <- surv_coef$btempdorm_s[post_draws[p]] + surv_coef$btempdormsex_s[post_draws[p]]
M_params$surv_tempgrow_pptgrow<-surv_coef$btempgrowpptgrow_s[post_draws[p]] + surv_coef$btempgrowpptgrowsex_s[post_draws[p]]
M_params$surv_tempdorm_pptdorm<-surv_coef$btempdormpptdorm_s[post_draws[p]] + surv_coef$btempdormpptdormsex_s[post_draws[p]]
M_params$surv_pptgrow2<-surv_coef$bpptgrow2_s[post_draws[p]] + surv_coef$bpptgrow2sex_s[post_draws[p]]
M_params$surv_tempgrow2<-surv_coef$btempgrow2_s[post_draws[p]] + surv_coef$btempgrow2sex_s[post_draws[p]]
M_params$surv_pptdorm2<-surv_coef$bpptdorm2_s[post_draws[p]] + surv_coef$bpptdorm2sex_s[post_draws[p]]
M_params$surv_tempdorm2<-surv_coef$btempdorm2_s[post_draws[p]] + surv_coef$btempdorm2sex_s[post_draws[p]]
## growth
F_params$grow_mu <- grow_coef$b0_g[post_draws[p]]
F_params$grow_size <- grow_coef$bsize_g[post_draws[p]]
F_params$grow_pptgrow <- grow_coef$bpptgrow_g[post_draws[p]]
F_params$grow_pptdorm <- grow_coef$bpptdorm_g[post_draws[p]]
F_params$grow_tempgrow <- grow_coef$btempgrow_g[post_draws[p]]
F_params$grow_tempdorm <- grow_coef$btempdorm_g[post_draws[p]]
F_params$grow_tempgrow_pptgrow<-grow_coef$btempgrowpptgrow_g[post_draws[p]]
F_params$grow_tempdorm_pptdorm<-grow_coef$btempdormpptdorm_g[post_draws[p]]
F_params$grow_pptgrow2<-grow_coef$bpptgrow2_g[post_draws[p]]
F_params$grow_tempgrow2<-grow_coef$btempgrow2_g[post_draws[p]]
F_params$grow_pptdorm2<-grow_coef$bpptdorm2_g[post_draws[p]]
F_params$grow_tempdorm2<-grow_coef$btempdorm2_g[post_draws[p]]
F_params$sigma_g <- grow_coef$sigma[post_draws[p]]
M_params$grow_mu <- grow_coef$b0_g[post_draws[p]] + grow_coef$bsex_g[post_draws[p]]
M_params$grow_size <- grow_coef$bsize_g[post_draws[p]] + grow_coef$bsizesex_g[post_draws[p]]
M_params$grow_pptgrow <- grow_coef$bpptgrow_g[post_draws[p]]  + grow_coef$bpptgrowsex_g[post_draws[p]]
M_params$grow_pptdorm <- grow_coef$bpptdorm_g[post_draws[p]]  + grow_coef$bpptdormsex_g[post_draws[p]]
M_params$grow_tempgrow <- grow_coef$btempgrow_g[post_draws[p]] + grow_coef$btempgrowsex_g[post_draws[p]]
M_params$grow_tempdorm <- grow_coef$btempdorm_g[post_draws[p]] + grow_coef$btempdormsex_g[post_draws[p]]
M_params$grow_tempgrow_pptgrow<-grow_coef$btempgrowpptgrow_g[post_draws[p]] + grow_coef$btempgrowpptgrowsex_g[post_draws[p]]
M_params$grow_tempdorm_pptdorm<-grow_coef$btempdormpptdorm_g[post_draws[p]] + grow_coef$btempdormpptdormsex_g[post_draws[p]]
M_params$grow_pptgrow2<-grow_coef$bpptgrow2_g[post_draws[p]] + grow_coef$bpptgrow2sex_g[post_draws[p]]
M_params$grow_tempgrow2<-grow_coef$btempgrow2_g[post_draws[p]] + grow_coef$btempgrow2sex_g[post_draws[p]]
M_params$grow_pptdorm2<-grow_coef$bpptdorm2_g[post_draws[p]] + grow_coef$bpptdorm2sex_g[post_draws[p]]
M_params$grow_tempdorm2<-grow_coef$btempdorm2_g[post_draws[p]] + grow_coef$btempdorm2sex_g[post_draws[p]]
M_params$sigma_g <- grow_coef$sigma[post_draws[p]]
## flowering
F_params$flow_mu <- flow_coef$b0_f[post_draws[p]]
F_params$flow_size <- flow_coef$bsize_f[post_draws[p]]
F_params$flow_pptgrow <- flow_coef$bpptgrow_f[post_draws[p]]
F_params$flow_tempgrow <- flow_coef$btempgrow_f[post_draws[p]]
F_params$flow_tempdorm <- flow_coef$btempdorm_f[post_draws[p]]
F_params$flow_pptdorm <- flow_coef$bpptdorm_f[post_draws[p]]
F_params$flow_tempgrow_pptgrow<-flow_coef$btempgrowpptgrow_f[post_draws[p]]
F_params$flow_tempdorm_pptdorm<-flow_coef$btempdormpptdorm_f[post_draws[p]]
F_params$flow_pptgrow2<-flow_coef$bpptgrow2_f[post_draws[p]]
F_params$flow_pptdorm2<-flow_coef$bpptdorm2_f[post_draws[p]]
F_params$flow_tempgrow2<-flow_coef$btempgrow2_f[post_draws[p]]
F_params$flow_tempdorm2<-flow_coef$btempdorm2_f[post_draws[p]]
M_params$flow_mu <- flow_coef$b0_f[post_draws[p]] + flow_coef$bsex_f[post_draws[p]]
M_params$flow_size <- flow_coef$bsize_f[post_draws[p]] + flow_coef$bsizesex_f[post_draws[p]]
M_params$flow_pptgrow <- flow_coef$bpptgrow_f[post_draws[p]]  + flow_coef$bpptgrowsex_f[post_draws[p]]
M_params$flow_tempgrow <- flow_coef$btempgrow_f[post_draws[p]] + flow_coef$btempgrowsex_f[post_draws[p]]
M_params$flow_tempdorm <- flow_coef$btempdorm_f[post_draws[p]] +  flow_coef$btempdormsex_f[post_draws[p]]
M_params$flow_pptdorm <- flow_coef$bpptdorm_f[post_draws[p]] + flow_coef$bpptdormsex_f[post_draws[p]]
M_params$flow_tempgrow_pptgrow<-flow_coef$btempgrowpptgrow_f[post_draws[p]] + flow_coef$btempgrowpptgrowsex_f[post_draws[p]]
M_params$flow_tempdorm_pptdorm<-flow_coef$btempdormpptdorm_f[post_draws[p]] + flow_coef$btempdormpptdormsex_f[post_draws[p]]
M_params$flow_pptgrow2<-flow_coef$bpptgrow2_f[post_draws[p]] + flow_coef$bpptgrow2sex_f[post_draws[p]]
M_params$flow_tempgrow2<-flow_coef$btempgrow2_f[post_draws[p]] + flow_coef$btempgrow2sex_f[post_draws[p]]
M_params$flow_pptdorm2<-flow_coef$bpptdorm2_f[post_draws[p]] +  flow_coef$bpptdorm2sex_f[post_draws[p]]
M_params$flow_tempdorm2<-flow_coef$btempdorm2_f[post_draws[p]] + flow_coef$btempdorm2sex_f[post_draws[p]]
## panicles
F_params$panic_mu <- panic_coef$b0_p[post_draws[p]]
F_params$panic_size <- panic_coef$bsize_p[post_draws[p]]
F_params$panic_pptgrow <- panic_coef$bpptgrow_p[post_draws[p]]
F_params$panic_tempgrow <- panic_coef$btempgrow_p[post_draws[p]]
F_params$panic_tempdorm <- panic_coef$btempdorm_p[post_draws[p]]
F_params$panic_pptdorm <- panic_coef$bpptdorm_p[post_draws[p]]
F_params$panic_tempgrow_pptgrow<-panic_coef$btempgrowpptgrow_p[post_draws[p]]
F_params$panic_tempdorm_pptdorm<-panic_coef$btempdormpptdorm_p[post_draws[p]]
F_params$panic_pptgrow2<-panic_coef$bpptgrow2_p[post_draws[p]]
F_params$panic_tempgrow2<-panic_coef$btempgrow2_p[post_draws[p]]
F_params$panic_pptdorm2<-panic_coef$bpptdorm2_p[post_draws[p]]
F_params$panic_tempdorm2<-panic_coef$btempdorm2_p[post_draws[p]]
M_params$panic_mu <- panic_coef$b0_p[post_draws[p]] + panic_coef$bsex_p[post_draws[p]]
M_params$panic_size <- panic_coef$bsize_p[post_draws[p]] + panic_coef$bsizesex_p[post_draws[p]]
M_params$panic_pptgrow <- panic_coef$bpptgrow_p[post_draws[p]]  + panic_coef$bpptgrowsex_p[post_draws[p]]
M_params$panic_tempgrow <- panic_coef$btempgrow_p[post_draws[p]] + panic_coef$btempgrowsex_p[post_draws[p]]
M_params$panic_tempdorm <- panic_coef$btempdorm_p[post_draws[p]] +  panic_coef$btempdormsex_p[post_draws[p]]
M_params$panic_pptdorm <- panic_coef$bpptdorm_p[post_draws[p]] + panic_coef$bpptdormsex_p[post_draws[p]]
M_params$panic_tempgrow_pptgrow<-panic_coef$btempgrowpptgrow_p[post_draws[p]] + panic_coef$btempgrowpptgrowsex_p[post_draws[p]]
M_params$panic_tempdorm_pptdorm<-panic_coef$btempdormpptdorm_p[post_draws[p]] + panic_coef$btempdormpptdormsex_p[post_draws[p]]
M_params$panic_pptgrow2<-panic_coef$bpptgrow2_p[post_draws[p]] + panic_coef$bpptgrow2sex_p[post_draws[p]]
M_params$panic_tempgrow2<-panic_coef$btempgrow2_p[post_draws[p]] + panic_coef$btempgrow2sex_p[post_draws[p]]
M_params$panic_pptdorm2<-panic_coef$bpptdorm2_p[post_draws[p]] + panic_coef$bpptdorm2sex_p[post_draws[p]]
M_params$panic_tempdorm2<-panic_coef$btempdorm2_p[post_draws[p]] + panic_coef$btempdorm2sex_p[post_draws[p]]
## seed viability and misc fertility params
F_params$v0 <- via_coef$v0[post_draws[p]]
F_params$a_v <- via_coef$a_v[post_draws[p]]
F_params$ov_per_inf <- via_coef$lambda_d[post_draws[p]]
F_params$germ <- via_coef$m[post_draws[p]]
F_params$PSR <- 0.5
## use POAU seedling survival for females and males
F_params$sdlg_surv <- M_params$sdlg_surv <- sdlg_surv$sdlg_surv
## set max size equal between the sexes
F_params$max_size <- M_params$max_size <- round(quantile(na.omit((poar.clim_seasonal$tillerN_t1)),probs=0.95))
## pull out the rfx variances
rfx <- rfx_fun(site_tau_s = surv_coef$site_tau_s[post_draws[p]],
block_tau_s = surv_coef$block_tau_s[post_draws[p]],
source_tau_s = surv_coef$source_tau_s[post_draws[p]],
site_tau_g = grow_coef$site_tau_g[post_draws[p]],
block_tau_g = grow_coef$block_tau_g[post_draws[p]],
source_tau_g = grow_coef$source_tau_g[post_draws[p]],
site_tau_f = flow_coef$site_tau_f[post_draws[p]],
block_tau_f = flow_coef$block_tau_f[post_draws[p]],
source_tau_f = flow_coef$source_tau_f[post_draws[p]],
site_tau_p = panic_coef$site_tau_p[post_draws[p]],
block_tau_p = panic_coef$block_tau_p[post_draws[p]],
source_tau_p = panic_coef$source_tau_p[post_draws[p]])
#Estimation+process error
lambdaSim_delay(F_params=F_params,
M_params=M_params,
grow_perturb=0,
surv_perturb=0,
flow_perturb=0,
fert_perturb=0,
viab_perturb=0,
zpptgrow=clim_past_values_clean[l,5],
ztempgrow=clim_past_values_clean[l,6],
zpptdorm=clim_past_values_clean[l,7],
ztempdorm=clim_past_values_clean[l,8],
rfx = rfx_fun(),
max.yrs = max_yrs)$lambdatracker[max_yrs]
}
)
