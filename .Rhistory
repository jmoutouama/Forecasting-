clones=length(unique(`INDIVIDUAL ID`)),
plant_Clone_ratio=plants/clones)->no_population
knitr::kable(no_population)
str(greenhouse)
unique(greenhouse$ENDOPHYTE)
knitr::opts_chunk$set(echo = FALSE,message = FALSE)
which(greenhouse$ENDOPHYTE=="E+ Con")
greenhouse$expected_endo=NA
greenhouse$expected_endo[which(greenhouse$ENDOPHYTE=="E+ Con")]=1
greenhouse$expected_endo[which(greenhouse$ENDOPHYTE=="E+/- Heat")]=0
greenhouse %>%
filter(HEALTH=="ALIVE") %>%
group_by(SPECIES,POPULATION,as.factor(expected_endo))
greenhouse$expected_endo=NA
greenhouse$expected_endo[which(greenhouse$ENDOPHYTE=="E+ Con")]="E+"
greenhouse$expected_endo[which(greenhouse$ENDOPHYTE=="E+/- Heat")]="E-"
c(1,NA,NA)
na.omit(c(1,NA,NA))
na.omit(c(1,NA,NA))+1
?na.omit
cbind(greenhouse$agrinostics_score_liberal,
greenhouse$seed_score_liberal,
greenhouse$Leaf_peel_liberal)
## create a single liberal and conservative score
greenhouse$liberal_score<-
na.omit(cbind(greenhouse$agrinostics_score_liberal,
greenhouse$seed_score_liberal,
greenhouse$Leaf_peel_liberal))
## create a single liberal and conservative score
greenhouse$liberal_score<-
mean(cbind(greenhouse$agrinostics_score_liberal,
greenhouse$seed_score_liberal,
greenhouse$Leaf_peel_liberal))
## create a single liberal and conservative score
greenhouse$liberal_score<-
mean(cbind(greenhouse$agrinostics_score_liberal,
greenhouse$seed_score_liberal,
greenhouse$Leaf_peel_liberal))
## create a single liberal and conservative score
greenhouse$liberal_score<-
mean(cbind(greenhouse$agrinostics_score_liberal,
greenhouse$seed_score_liberal,
greenhouse$Leaf_peel_liberal))
mean(cbind(greenhouse$agrinostics_score_liberal,
greenhouse$seed_score_liberal,
greenhouse$Leaf_peel_liberal))
## create a single liberal and conservative score
greenhouse$liberal_score<-
mean(greenhouse$agrinostics_score_liberal,
greenhouse$seed_score_liberal,
greenhouse$Leaf_peel_liberal)
colMeans()
?colMeans
## create a single liberal and conservative score
greenhouse$liberal_score<-
colMeans(cbind(greenhouse$agrinostics_score_liberal,
greenhouse$seed_score_liberal,
greenhouse$Leaf_peel_liberal))
## create a single liberal and conservative score
colMeans(cbind(greenhouse$agrinostics_score_liberal,
greenhouse$seed_score_liberal,
greenhouse$Leaf_peel_liberal))
cbind(greenhouse$agrinostics_score_liberal,
greenhouse$seed_score_liberal,
greenhouse$Leaf_peel_liberal)
matrix(runif(25,0,10),5,5)
X=matrix(runif(25,0,10),5,5)
X=matrix(runif(25,0,10),5,5)
X=matrix(runif(10,0,10),2,5)
X
X=matrix(runif(10,0,10),5,2)
X
colMeans(X)
rowMeans(X)
## create a single liberal and conservative score
rowMeans(cbind(greenhouse$agrinostics_score_liberal,
greenhouse$seed_score_liberal,
greenhouse$Leaf_peel_liberal))
## create a single liberal and conservative score
greenhouse$liberal_score <-   rowMeans(cbind(greenhouse$agrinostics_score_liberal,
greenhouse$seed_score_liberal,
greenhouse$Leaf_peel_liberal),na.rm=T)
greenhouse$conservative_score <-   rowMeans(cbind(greenhouse$agrinostics_score_conservative,
greenhouse$seed_score_conservative,
greenhouse$Leaf_peel_conservative),na.rm=T)
mean(NA,NA,na.rm=T)
mean(c(NA,NA),na.rm=T)
View(greenhouse)
greenhouse %>%
filter(HEALTH=="ALIVE") %>%
group_by(SPECIES,POPULATION,expected_endo) %>%
mutate(scored= !is.nan(liberal_score) | !is.nan(conservative_score))
greenhouse %>%
filter(HEALTH=="ALIVE") %>%
filter(!is.nan(liberal_score) | !is.nan(conservative_score)) %>%
select(SPECIES,POPULATION,`INDIVIDUAL ID`,expected_endo,liberal_score,conservative_score) %>%
unique()
greenhouse %>%
filter(HEALTH=="ALIVE") %>%
filter(!is.nan(liberal_score) | !is.nan(conservative_score)) %>%
select(SPECIES,POPULATION,`INDIVIDUAL ID`,expected_endo,liberal_score,conservative_score) %>%
unique() %>%
summarise(liberal_endo_prevalence = mean(liberal_score),
conservative_endo_prevalence = mean(conservative_score)) %>%
knitr::kable()
greenhouse %>%
filter(HEALTH=="ALIVE") %>%
filter(!is.nan(liberal_score) | !is.nan(conservative_score)) %>%
select(SPECIES,POPULATION,`INDIVIDUAL ID`,expected_endo,liberal_score,conservative_score) %>%
unique() %>%
group_by(SPECIES,POPULATION,expected_endo) %>%
summarise(liberal_endo_prevalence = mean(liberal_score),
conservative_endo_prevalence = mean(conservative_score)) %>%
knitr::kable()
which(is.nan(greenhouse$conservative_score))
greenhouse %>%
filter(HEALTH=="ALIVE") %>%
filter(!is.nan(liberal_score) | !is.nan(conservative_score)) %>%
select(SPECIES,POPULATION,`INDIVIDUAL ID`,expected_endo,liberal_score,conservative_score) %>%
unique() %>%
filter(SPECIES=="AGHY" & POPULATION=="COHR" & expected_endo=="E+")
setwd("C:/Users/tm9/Box/Miller Lab/Endophytes - Range Limits")
greenhouse<-read_excel("Greenhouse_Inventory.xlsx",
sheet = "Range Limit Greenhouse")
## summary of plants and clones
greenhouse %>%
filter(HEALTH=="ALIVE") %>%
group_by(SPECIES,POPULATION,ENDOPHYTE) %>%
summarise(plants=n(),
clones=length(unique(`INDIVIDUAL ID`)),
plant_Clone_ratio=plants/clones)->plants_clones
## summary of scores
greenhouse %>%
filter(HEALTH=="ALIVE") %>%
mutate(scored=!is.na(Leaf_peel_liberal)|!is.na(seed_score_liberal)|!is.na(agrinostics_score_liberal)) %>%
group_by(SPECIES,POPULATION,ENDOPHYTE,`INDIVIDUAL ID`) %>%
summarise(scored=unique(scored)) %>%
group_by(SPECIES,POPULATION,ENDOPHYTE) %>%
summarise(fraction_clones_scored=mean(scored))->scores
p<-left_join(plants_clones,scores,by=c("SPECIES","POPULATION","ENDOPHYTE"))
knitr::kable(p)
greenhouse %>%
filter(HEALTH=="ALIVE", SPECIES=="AGHY") %>%
filter(is.nan(liberal_score) | is.nan(conservative_score)) %>%
select(POPULATION,`INDIVIDUAL ID`) %>%
unique()
greenhouse %>%
filter(HEALTH=="ALIVE" & SPECIES=="AGHY") %>%
filter(is.nan(liberal_score) | is.nan(conservative_score)) %>%
select(POPULATION,`INDIVIDUAL ID`) %>%
unique()
## redefine the expected endo labels
greenhouse$expected_endo=NA
greenhouse$expected_endo[which(greenhouse$ENDOPHYTE=="E+ Con")]="E+"
greenhouse$expected_endo[which(greenhouse$ENDOPHYTE=="E+/- Heat")]="E-"
## create a single liberal and conservative score
greenhouse$liberal_score <-   rowMeans(cbind(greenhouse$agrinostics_score_liberal,
greenhouse$seed_score_liberal,
greenhouse$Leaf_peel_liberal),na.rm=T)
greenhouse$conservative_score <-   rowMeans(cbind(greenhouse$agrinostics_score_conservative,
greenhouse$seed_score_conservative,
greenhouse$Leaf_peel_conservative),na.rm=T)
greenhouse %>%
filter(HEALTH=="ALIVE") %>%
filter(!is.nan(liberal_score) | !is.nan(conservative_score)) %>%
select(SPECIES,POPULATION,`INDIVIDUAL ID`,expected_endo,liberal_score,conservative_score) %>%
unique() %>%
group_by(SPECIES,POPULATION,expected_endo) %>%
summarise(n_scores=n(),
liberal_endo_prevalence = mean(liberal_score),
conservative_endo_prevalence = mean(conservative_score)) %>%
knitr::kable()
greenhouse %>%
filter(HEALTH=="ALIVE" & SPECIES=="AGHY") %>%
filter(is.nan(liberal_score) | is.nan(conservative_score)) %>%
select(POPULATION,`INDIVIDUAL ID`) %>%
unique()
## redefine the expected endo labels
greenhouse$expected_endo=NA
greenhouse$expected_endo[which(greenhouse$ENDOPHYTE=="E+ Con")]="E+"
greenhouse$expected_endo[which(greenhouse$ENDOPHYTE=="E+/- Heat")]="E-"
## create a single liberal and conservative score
greenhouse$liberal_score <-   rowMeans(cbind(greenhouse$agrinostics_score_liberal,
greenhouse$seed_score_liberal,
greenhouse$Leaf_peel_liberal),na.rm=T)
greenhouse$conservative_score <-   rowMeans(cbind(greenhouse$agrinostics_score_conservative,
greenhouse$seed_score_conservative,
greenhouse$Leaf_peel_conservative),na.rm=T)
greenhouse %>%
filter(HEALTH=="ALIVE") %>%
filter(!is.nan(liberal_score) | !is.nan(conservative_score)) %>%
select(SPECIES,POPULATION,`INDIVIDUAL ID`,expected_endo,liberal_score,conservative_score) %>%
unique() %>%
group_by(SPECIES,POPULATION,expected_endo) %>%
summarise(n_scores=n(),
liberal_endo_prevalence = mean(liberal_score),
conservative_endo_prevalence = mean(conservative_score)) %>%
knitr::kable()
greenhouse %>%
filter(HEALTH=="ALIVE" & SPECIES=="AGHY") %>%
filter(is.nan(liberal_score) | is.nan(conservative_score)) %>%
select(POPULATION,`INDIVIDUAL ID`) %>%
unique()->AGHY_noscore
greenhouse %>%
filter(HEALTH=="ALIVE" & SPECIES=="AGHY") %>%
filter(is.nan(liberal_score) | is.nan(conservative_score)) %>%
select(POPULATION,`INDIVIDUAL ID`) %>%
group_by(POPULATION) %>%
unique() %>%
arrange(POPULATION)->AGHY_noscore
AGHY_noscore
knitr::opts_chunk$set(echo = FALSE,message = FALSE,warning=FALSE)
library(tidyverse)
library(readxl)
setwd("C:/Users/tm9/Box/Miller Lab/Endophytes - Range Limits")
greenhouse<-read_excel("Greenhouse_Inventory.xlsx",
sheet = "Range Limit Greenhouse")
greenhouse$`INDIVIDUAL ID`<- as.character(greenhouse$`INDIVIDUAL ID`)
## summary of plants and clones
greenhouse %>%
filter(HEALTH=="ALIVE") %>%
group_by(SPECIES,POPULATION,ENDOPHYTE) %>%
summarise(plants=n(),
clones=length(unique(`INDIVIDUAL ID`)),
plant_Clone_ratio=plants/clones)->plants_clones
## summary of scores
greenhouse %>%
filter(HEALTH=="ALIVE") %>%
mutate(scored=!is.na(Leaf_peel_liberal)|!is.na(seed_score_liberal)|!is.na(agrinostics_score_liberal)) %>%
group_by(SPECIES,POPULATION,ENDOPHYTE,`INDIVIDUAL ID`) %>%
summarise(scored=unique(scored)) %>%
group_by(SPECIES,POPULATION,ENDOPHYTE) %>%
summarise(fraction_clones_scored=mean(scored))->scores
p<-left_join(plants_clones,scores,by=c("SPECIES","POPULATION","ENDOPHYTE"))
knitr::kable(p)
##total numbers
greenhouse %>%
filter(HEALTH=="ALIVE") %>%
group_by(SPECIES,ENDOPHYTE) %>%
summarise(plants=n(),
clones=length(unique(`INDIVIDUAL ID`)),
plant_Clone_ratio=plants/clones)->no_population
knitr::kable(no_population)
## redefine the expected endo labels
greenhouse$expected_endo=NA
greenhouse$expected_endo[which(greenhouse$ENDOPHYTE=="E+ Con")]="E+"
greenhouse$expected_endo[which(greenhouse$ENDOPHYTE=="E+/- Heat")]="E-"
## create a single liberal and conservative score
greenhouse$liberal_score <-   rowMeans(cbind(greenhouse$agrinostics_score_liberal,
greenhouse$seed_score_liberal,
greenhouse$Leaf_peel_liberal),na.rm=T)
greenhouse$conservative_score <-   rowMeans(cbind(greenhouse$agrinostics_score_conservative,
greenhouse$seed_score_conservative,
greenhouse$Leaf_peel_conservative),na.rm=T)
greenhouse %>%
filter(HEALTH=="ALIVE") %>%
filter(!is.nan(liberal_score) | !is.nan(conservative_score)) %>%
select(SPECIES,POPULATION,`INDIVIDUAL ID`,expected_endo,liberal_score,conservative_score) %>%
unique() %>%
group_by(SPECIES,POPULATION,expected_endo) %>%
summarise(n_scores=n(),
liberal_endo_prevalence = mean(liberal_score),
conservative_endo_prevalence = mean(conservative_score)) %>%
knitr::kable()
greenhouse %>%
filter(HEALTH=="ALIVE" & SPECIES=="AGHY") %>%
filter(is.nan(liberal_score) | is.nan(conservative_score)) %>%
select(POPULATION,`INDIVIDUAL ID`,expected_endo) %>%
group_by(POPULATION,expected_endo) %>%
unique() %>%
arrange(POPULATION,expected_endo)->AGHY_noscore
greenhouse %>%
filter(HEALTH=="ALIVE" & SPECIES=="ELVI") %>%
filter(is.nan(liberal_score) | is.nan(conservative_score)) %>%
select(POPULATION,`INDIVIDUAL ID`,expected_endo) %>%
group_by(POPULATION,expected_endo) %>%
unique() %>%
arrange(POPULATION,expected_endo)->ELVI_noscore
greenhouse %>%
filter(HEALTH=="ALIVE" & SPECIES=="POAU") %>%
filter(is.nan(liberal_score) | is.nan(conservative_score)) %>%
select(POPULATION,`INDIVIDUAL ID`,expected_endo) %>%
group_by(POPULATION,expected_endo) %>%
unique() %>%
arrange(POPULATION,expected_endo)->POAU_noscore
greenhouse %>%
filter(HEALTH=="ALIVE") %>%
group_by(SPECIES,POPULATION,`INDIVIDUAL ID`,expected_endo) %>%
summarise(clone_number=n()) %>%
arrange(SPECIES,POPULATION,expected_endo,desc(clone_number)) %>%
filter(clone_number>1)%>%
knitr::kable()
## as of now this ia just the huntsville site
aghy_plots<-read_excel("endo_range_limits_experiment.xlsx",
sheet = "AGHY plot assignments")
aghy_plots%>%
pivot_longer(
cols = starts_with("Plot"),
names_to = "Plot",
values_to = "Plant")
names(aghy_plots)
aghy_plots%>%
select(Site,Plot1:Plot8) %>%
pivot_longer(
cols = starts_with("Plot"),
names_to = "Plot",
values_to = "Plant")
aghy_plots%>%
select(Site,Plot1:Plot8) %>%
pivot_longer(
cols = starts_with("Plot"),
names_to = "Plot",
values_to = "Plant") %>%
group_by(Site,Plot)
aghy_plots%>%
select(Site,Plot1:Plot8) %>%
pivot_longer(
cols = starts_with("Plot"),
names_to = "Plot",
values_to = "Plant") %>%
arrange(Site,Plot)
aghy_plots%>%
select(Site,Plot1:Plot8) %>%
pivot_longer(
cols = starts_with("Plot"),
names_to = "Plot",
values_to = "Plant") %>%
arrange(Site,Plot) %>%
mutate(add=str_spl(Plant,","))
## as of now this ia just the huntsville site
aghy_plots<-read_excel("endo_range_limits_experiment.xlsx",
sheet = "AGHY plot assignments") %>%
select(Site,Plot1:Plot8) %>%
pivot_longer(
cols = starts_with("Plot"),
names_to = "Plot",
values_to = "Plant") %>%
arrange(Site,Plot)
str_split(aghy_plots$Plant,pattern = ",")
## as of now this ia just the huntsville site
aghy_plots<-read_excel("endo_range_limits_experiment.xlsx",
sheet = "AGHY plot assignments") %>%
select(Site,Plot1:Plot8) %>%
pivot_longer(
cols = starts_with("Plot"),
names_to = "Plot",
values_to = "Plant") %>%
arrange(Site,Plot) %>%
separate_wider_delim(Plant,delim=",",names=c("Population","ID","Clone","Real_endo"))
## as of now this ia just the huntsville site
aghy_plots<-read_excel("endo_range_limits_experiment.xlsx",
sheet = "AGHY plot assignments") %>%
select(Site,Plot1:Plot8) %>%
pivot_longer(
cols = starts_with("Plot"),
names_to = "Plot",
values_to = "Plant") %>%
arrange(Site,Plot) %>%
tidyr::separate_wider_delim(Plant,delim=",",names=c("Population","ID","Clone","Real_endo"))
?separate_wider_delim
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = FALSE,message = FALSE,warning=FALSE)
## as of now this ia just the huntsville site
aghy_plots<-read_excel("endo_range_limits_experiment.xlsx",
sheet = "AGHY plot assignments") %>%
select(Site,Plot1:Plot8) %>%
pivot_longer(
cols = starts_with("Plot"),
names_to = "Plot",
values_to = "Plant") %>%
arrange(Site,Plot) %>%
separate_wider_delim(Plant,delim=",",names=c("Population","ID","Clone","Real_endo"))
library(tidyverse)
library(tidyverse)
install.packages(c("actuar", "aplot", "bayesplot", "BH", "binr", "BiodiversityR", "bit", "brew", "bslib", "cachem", "callr", "car", "chron", "classInt", "cli", "colorspace", "commonmark", "cpp11", "crayon", "crch", "crul", "cubelyr", "curl", "data.table", "DBI", "dbplyr", "desc", "deSolve", "devtools", "digest", "distributional", "dplyr", "dtplyr", "e1071", "evaluate", "expint", "extrafont", "fansi", "farver", "fastmap", "fontawesome", "forcats", "Formula", "fs", "gamlss", "gargle", "generics", "geometries", "gert", "ggbreak", "ggfun", "ggpubr", "ggrepel", "ggridges", "gh", "gitcreds", "googlesheets4", "gsw", "gtable", "highr", "Hmisc", "hoardr", "htmltools", "htmlwidgets", "httpuv", "insight", "isoband", "jpeg", "jsonify", "jsonlite", "kernlab", "knitr", "ks", "lme4", "lmomco", "locfit", "lubridate", "mapproj", "maps", "maptools", "markdown", "Matrix", "matrixStats", "mclust", "minpack.lm", "minqa", "oce", "openssl", "ordinal", "patchwork", "pbapply", "pbkrtest", "pcaPP", "pkgbuild", "pkgdown", "pkgload", "plyr", "png", "posterior", "processx", "ps", "purrr", "ragg", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readstata13", "readxl", "reprex", "rlang", "rmarkdown", "roxygen2", "RSQLite", "rstan", "rstatix", "Rttf2pt1", "rversions", "rvest", "s2", "sandwich", "sass", "scales", "scoringRules", "seriation", "servr", "sf", "shiny", "sourcetools", "sp", "SPEI", "stringi", "svglite", "sys", "terra", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "TMB", "TSP", "ucminf", "units", "utf8", "vctrs", "VGAM", "viridisLite", "vroom", "webshot", "whisker", "wk", "xfun", "XML", "yaml", "yulab.utils", "zip", "zoo"))
setwd("C:/Users/tm9/Dropbox/github/POAR-Forecasting")
knitr::opts_chunk$set(comment=NA,
echo = TRUE,
warning=FALSE,
message=FALSE)
knitr::opts_knit$set(global.par = TRUE,knitr.table.format = "latex")
rm(list = ls())
# load packages
library(rstan)
# set rstan options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(13)
# Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7 -mtune=corei7')
options(tidyverse.quiet = TRUE)
library(tidyverse)
options(dplyr.summarise.inform = FALSE)
library(bayesplot)
# install.packages("countreg",repos = "http://R-Forge.R-project.org")
library(countreg)
# install.packages("countreg",repos = "http://R-Forge.R-project.org")
library(countreg)
# install.packages("countreg",repos = "http://R-Forge.R-project.org")
library(countreg)
library(rmutil)
library(actuar)
library(SPEI)
library(LaplacesDemon)
poar_allsites <- read.csv("https://www.dropbox.com/s/xk4225mn8btqhbm/demography_allsites.csv?dl=1", stringsAsFactors = F)#common garden data
viabVr <- read.csv("https://www.dropbox.com/s/jfkgoxgv8o1fgqx/viability.csv?dl=1") #seed viability and germination
poar_allsites$census.year<-poar_allsites$year-1 #Add census year to match with climate data
# seed viability
viabVr %>%
dplyr::select( plot, totS, yesMaybe, sr_f ) %>%
rename( SR        = sr_f,
y_viab = yesMaybe,
tot_seeds_viab = totS) %>%
dplyr::select(y_viab, tot_seeds_viab, SR ) %>%
na.omit->viab
# seed germination
viabVr %>%
dplyr::select( plot, germTot, germFail, sr_f ) %>%
rename( SR        = sr_f,
y_germ    = germTot ) %>%
mutate(tot_seeds_germ = y_germ + germFail ) %>%
dplyr::select(y_germ, tot_seeds_germ, SR ) %>%
na.omit->germ
# seeds per panicle
viabVr %>%
dplyr::select(SeedN)  %>%
na.omit->seeds
# load packages
library(rstan)
# set rstan options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(13)
# Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7 -mtune=corei7')
options(tidyverse.quiet = TRUE)
library(tidyverse)
options(dplyr.summarise.inform = FALSE)
library(bayesplot)
viabVr <- read.csv("https://www.dropbox.com/s/jfkgoxgv8o1fgqx/viability.csv?dl=1") #seed viability and germination
# seed viability
viabVr %>%
dplyr::select( plot, totS, yesMaybe, sr_f ) %>%
rename( SR        = sr_f,
y_viab = yesMaybe,
tot_seeds_viab = totS) %>%
dplyr::select(y_viab, tot_seeds_viab, SR ) %>%
na.omit->viab
# seed germination
viabVr %>%
dplyr::select( plot, germTot, germFail, sr_f ) %>%
rename( SR        = sr_f,
y_germ    = germTot ) %>%
mutate(tot_seeds_germ = y_germ + germFail ) %>%
dplyr::select(y_germ, tot_seeds_germ, SR ) %>%
na.omit->germ
data_viab_germ <- list( # viability
n_v       = nrow(viab),
y_v       = viab$y_viab,
tot_seeds_v = viab$tot_seeds_viab,
SR_v        = viab$SR,
# germination
n_m       = nrow(germ),
y_m       = germ$y_germ,
tot_seeds_m = germ$tot_seeds_germ,
SR_m        = germ$SR)
getwd()
# seed viability
viabVr %>%
dplyr::select( plot, totS, yesMaybe, sr_f ) %>%
rename( SR        = sr_f,
y_viab = yesMaybe,
tot_seeds_viab = totS) %>%
dplyr::select(y_viab, tot_seeds_viab, SR ) %>%
na.omit->viab
# seed germination
viabVr %>%
dplyr::select( plot, germTot, germFail, sr_f ) %>%
rename( SR        = sr_f,
y_germ    = germTot ) %>%
mutate(tot_seeds_germ = y_germ + germFail ) %>%
dplyr::select(y_germ, tot_seeds_germ, SR ) %>%
na.omit->germ
data_viab_germ <- list( # viability
n_v       = nrow(viab),
y_v       = viab$y_viab,
tot_seeds_v = viab$tot_seeds_viab,
SR_v        = viab$SR,
# germination
n_m       = nrow(germ),
y_m       = germ$y_germ,
tot_seeds_m = germ$tot_seeds_germ,
SR_m        = germ$SR)
sim_pars <- list(
warmup = 1000,
iter = 4000,
thin = 3,
chains = 3
)
fit_viab_germ <- stan(
file = "stan/poar_viab_germ.stan",
data = data_viab_germ,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
stancode <- 'data {real y_mean;} parameters {real y;} model {y ~ normal(y_mean,1);}'
mod <- stan_model(model_code = stancode, verbose = TRUE)
install.packages("rstan")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
