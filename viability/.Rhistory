options(dplyr.summarise.inform = FALSE)
library(bayesplot)
# install.packages("countreg",repos = "http://R-Forge.R-project.org")
library(countreg)
library(rmutil)
library(actuar)
library(SPEI)
library(LaplacesDemon)
poar_allsites <- read.csv("https://www.dropbox.com/s/xk4225mn8btqhbm/demography_allsites.csv?dl=1", stringsAsFactors = F)#common garden data
poar_allsites$census.year<-poar_allsites$year-1 #Add census year to match with climate data
summary(poar_allsites)
poar_ppt <- read.csv("/Users/jm200/Library/CloudStorage/Box-Box/Miller Lab/Moutouama Rice University/Forecasting/data/Poa_pr.csv", stringsAsFactors = F) # monthly  precipitation
poar_temp <- read.csv("/Users/jm200/Library/CloudStorage/Box-Box/Miller Lab/Moutouama Rice University/Forecasting/data/Poa_tas.csv", stringsAsFactors = F) # monthly temperature)
poar_ppt$census.year<-ifelse(poar_ppt$month<5,poar_ppt$year-1,poar_ppt$year) # data were collected in May. Thus, the precipitation for the census year is both the precipitation from May to December of the previous year and precipitation of the current year.
poar_temp$census.year<-ifelse(poar_temp$month<5,poar_temp$year-1,poar_temp$year)
poar_ppt %>%
dplyr::select(Longitude, Latitude, census.year, ppt,site,long.scaled,long.center) %>%
filter(census.year %in% (2014:2016)) %>%
group_by(site,census.year) %>%
summarise(mean_ppt=sum(ppt),sd_ppt=sd(ppt),cv_ppt=sd_ppt/mean_ppt,Longitude=unique(Longitude),Latitude=unique(Latitude))->poar_pptann # annual precipitation and seasonality of precipitation seasonality of temperature
poar_temp %>%
dplyr::select(Longitude, Latitude, census.year, temp,site,long.scaled,long.center) %>%
filter(census.year %in% (2014:2016)) %>%
group_by(site,census.year) %>%
summarise(mean_temp = mean(temp),sd_temp=sd(temp),cv_temp=sd_temp/mean_temp,Longitude=unique(Longitude),Latitude=unique(Latitude))->poar_tempann # mean annual temperature and
poar_clim<- merge(x = poar_pptann, y = poar_tempann) # merge temperature and precipitation data
poar_allsites.clim <- left_join(x = poar_allsites ,y =poar_clim,by=c("site","census.year","Longitude","Latitude")) # merge the demographic data with climatic data for each site
poar_allsites.clim$siteyear<-interaction(poar_allsites.clim$site,poar_allsites.clim$census.year) # create a new variable taking into account the year and the climate variable
poar_allsites.clim$siteyear<-as.character(poar_allsites.clim$siteyear)
# Survival
poar_allsites.clim %>%
subset( tillerN_t0 > 0 )%>%
dplyr::select( year, Code, site, Block, Sex,
Longitude, Latitude,
tillerN_t0, surv_t1,mean_ppt,cv_ppt,mean_temp,siteyear)%>%
na.omit %>%
mutate( site         = site %>% as.factor %>% as.numeric,
Block = Block %>% as.factor %>% as.numeric,
Sex          = Sex %>% as.factor %>% as.numeric,
siteyear = siteyear %>% as.factor %>% as.numeric,
source = Code %>% as.factor %>% as.numeric ) %>%
mutate( log_size_t0   = log(tillerN_t0),
log_ppt_t1_z = log(mean_ppt) %>% scale %>% .[,1],
log_cvppt_t1_z = log(cv_ppt) %>% scale %>% .[,1],
log_temp_t1_z = log(mean_temp) %>% scale %>% .[,1])->poar_allsites.surv
# flowering
poar_allsites.clim %>%
subset( tillerN_t1 > 0 )%>%
dplyr::select( year, Code, site, Block, Sex,
Longitude, Latitude,
tillerN_t1, flowerN_t1,flow_t1,mean_ppt,cv_ppt,mean_temp,siteyear)%>%
na.omit %>%
mutate( site         = site %>% as.factor %>% as.numeric,
Block = Block %>% as.factor %>% as.numeric,
Sex          = Sex %>% as.factor %>% as.numeric,
siteyear = siteyear %>% as.factor %>% as.numeric,
source = Code %>% as.factor %>% as.numeric ) %>%
mutate( log_size_t1   = log(tillerN_t1),
log_ppt_t1_z = log(mean_ppt) %>% scale %>% .[,1],
log_cvppt_t1_z = log(cv_ppt) %>% scale %>% .[,1],
log_temp_t1_z = log(mean_temp) %>% scale %>% .[,1])->poar_allsites.flow
data_allsites.flow <- list( n_sites    = poar_allsites.surv$site %>% n_distinct,
n_sources  = poar_allsites.surv$source %>% n_distinct(),
# flowering data
n_blocks_f = poar_allsites.flow$Block %>% n_distinct,
n_siteyear_f = poar_allsites.flow$siteyear %>% n_distinct,
site_f   = poar_allsites.flow$site,
source_f =  poar_allsites.flow$source,
block_f  = poar_allsites.flow$Block,
siteyear_f  = poar_allsites.flow$siteyear,
ppt_f=poar_allsites.flow$log_ppt_t1_z,
cvppt_f=poar_allsites.flow$log_cvppt_t1_z,
temp_f=poar_allsites.flow$log_temp_t1_z,
site_block_f = data.frame( site_i  = poar_allsites.flow$site,
block_i = poar_allsites.flow$Block ) %>%
unique %>% .$site_i,
male_f   = poar_allsites.flow$Sex-1,
size_f   = poar_allsites.flow$log_size_t1,
y_f      = poar_allsites.flow$flow_t1,
n_f      = nrow(poar_allsites.flow))
sim_pars <- list(
warmup = 1000,
iter = 4000,
thin = 3,
chains = 3
)
fit_allsites_flow <- stan(
file = "/Users/jm200/Library/CloudStorage/Box-Box/Miller Lab/Moutouama Rice University/Forecasting/stan/Code/poar_flowering.stan",
data = data_allsites.flow,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains,
seed=13)
rm(list = ls())
# load packages
library(rstan)
# set rstan options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(13)
# Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7 -mtune=corei7')
options(tidyverse.quiet = TRUE)
library(tidyverse)
options(dplyr.summarise.inform = FALSE)
library(bayesplot)
# install.packages("countreg",repos = "http://R-Forge.R-project.org")
library(countreg)
library(rmutil)
library(actuar)
library(SPEI)
library(LaplacesDemon)
poar_allsites <- read.csv("https://www.dropbox.com/s/xk4225mn8btqhbm/demography_allsites.csv?dl=1", stringsAsFactors = F)#common garden data
viabVr <- read.csv("https://www.dropbox.com/s/jfkgoxgv8o1fgqx/viability.csv?dl=1") #seed viability and germination
poar_allsites$census.year<-poar_allsites$year-1 #Add census year to match with climate data
summary(poar_allsites)
poar_ppt <- read.csv("/Users/jm200/Library/CloudStorage/Box-Box/Miller Lab/Moutouama Rice University/Forecasting/data/Poa_pr.csv", stringsAsFactors = F) # monthly  precipitation
poar_temp <- read.csv("/Users/jm200/Library/CloudStorage/Box-Box/Miller Lab/Moutouama Rice University/Forecasting/data/Poa_tas.csv", stringsAsFactors = F) # monthly temperature)
poar_ppt$census.year<-ifelse(poar_ppt$month<5,poar_ppt$year-1,poar_ppt$year) # data were collected in May. Thus, the precipitation for the census year is both the precipitation from May to December of the previous year and precipitation of the current year.
poar_temp$census.year<-ifelse(poar_temp$month<5,poar_temp$year-1,poar_temp$year)
poar_ppt %>%
dplyr::select(Longitude, Latitude, census.year, ppt,site,long.scaled,long.center) %>%
filter(census.year %in% (2014:2016)) %>%
group_by(site,census.year) %>%
summarise(mean_ppt=sum(ppt),sd_ppt=sd(ppt),cv_ppt=sd_ppt/mean_ppt,Longitude=unique(Longitude),Latitude=unique(Latitude))->poar_pptann # annual precipitation and seasonality of precipitation seasonality of temperature
poar_temp %>%
dplyr::select(Longitude, Latitude, census.year, temp,site,long.scaled,long.center) %>%
filter(census.year %in% (2014:2016)) %>%
group_by(site,census.year) %>%
summarise(mean_temp = mean(temp),sd_temp=sd(temp),cv_temp=sd_temp/mean_temp,Longitude=unique(Longitude),Latitude=unique(Latitude))->poar_tempann # mean annual temperature and
poar_clim<- merge(x = poar_pptann, y = poar_tempann) # merge temperature and precipitation data
poar_allsites.clim <- left_join(x = poar_allsites ,y =poar_clim,by=c("site","census.year","Longitude","Latitude")) # merge the demographic data with climatic data for each site
poar_allsites.clim$siteyear<-interaction(poar_allsites.clim$site,poar_allsites.clim$census.year) # create a new variable taking into account the year and the climate variable
poar_allsites.clim$siteyear<-as.character(poar_allsites.clim$siteyear)
# Survival
poar_allsites.clim %>%
subset( tillerN_t0 > 0 )%>%
dplyr::select( year, Code, site, Block, Sex,
Longitude, Latitude,
tillerN_t0, surv_t1,mean_ppt,cv_ppt,mean_temp,siteyear)%>%
na.omit %>%
mutate( site         = site %>% as.factor %>% as.numeric,
Block = Block %>% as.factor %>% as.numeric,
Sex          = Sex %>% as.factor %>% as.numeric,
siteyear = siteyear %>% as.factor %>% as.numeric,
source = Code %>% as.factor %>% as.numeric ) %>%
mutate( log_size_t0   = log(tillerN_t0),
log_ppt_t1_z = log(mean_ppt) %>% scale %>% .[,1],
log_cvppt_t1_z = log(cv_ppt) %>% scale %>% .[,1],
log_temp_t1_z = log(mean_temp) %>% scale %>% .[,1])->poar_allsites.surv
# seed viability
viabVr %>%
dplyr::select( plot, totS, yesMaybe, sr_f ) %>%
rename( SR        = sr_f,
y_viab = yesMaybe,
tot_seeds_viab = totS) %>%
dplyr::select(y_viab, tot_seeds_viab, SR ) %>%
na.omit->viab
# seed germination
viabVr %>%
dplyr::select( plot, germTot, germFail, sr_f ) %>%
rename( SR        = sr_f,
y_germ    = germTot ) %>%
mutate(tot_seeds_germ = y_germ + germFail ) %>%
dplyr::select(y_germ, tot_seeds_germ, SR ) %>%
na.omit->germ
# seeds per panicle
viabVr %>%
dplyr::select(SeedN)  %>%
na.omit->seeds
data_allsites.via <- list( n_sites    = poar_allsites.surv$site %>% n_distinct,
n_sources  = poar_allsites.surv$source %>% n_distinct(),
# viability
n_v       = nrow(viab),
y_v       = viab$y_viab,
tot_seeds_v = viab$tot_seeds_viab,
SR_v        = viab$SR,
# germination
n_m       = nrow(germ),
y_m       = germ$y_germ,
tot_seeds_m = germ$tot_seeds_germ,
SR_m        = germ$SR,
# seeds per panicle
n_d = nrow(seeds),
y_d = seeds$SeedN)
sim_pars <- list(
warmup = 1000,
iter = 4000,
thin = 3,
chains = 3
)
fit_allsites_via <- stan(
file = "/Users/jm200/Library/CloudStorage/Box-Box/Miller Lab/Moutouama Rice University/Forecasting/stan/Code/viability.stan",
data = data_allsites.via,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains,
seed=13)
fit_allsites_via <- stan(
file = "/Users/jm200/Library/CloudStorage/Box-Box/Miller Lab/Moutouama Rice University/Forecasting/stan/Code/poar_germination.stan",
data = data_allsites.via,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains,
seed=13)
# saveRDS(fit_allsites_full, 'C:/YOURDIRECTORY')
fit_allsites_via <- stan(
file = "/Users/jm200/Library/CloudStorage/Box-Box/Miller Lab/Moutouama Rice University/Forecasting/stan/Code/poar_germination.stan",
data = data_allsites.via,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains,
seed=13)
# saveRDS(fit_allsites_full, 'C:/YOURDIRECTORY')
fit_allsites_via <- stan(
file = "/Users/jm200/Library/CloudStorage/Box-Box/Miller Lab/Moutouama Rice University/Forecasting/stan/Code/poar_germination.stan",
data = data_allsites.via,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains,
seed=13)
# saveRDS(fit_allsites_full, 'C:/YOURDIRECTORY')
traceplot(fit_allsites_via, pars = c("v0","a_v","m","phi_m"), inc_warmup = TRUE, nrow = 2) # The traceplot method is used to plot the time series of the posterior draws. If we include the warmup draws by setting inc_warmup=TRUE, the background color of the warmup area is different from the post-warmup phase
pairs(fit_allsites_paniclecv, pars =  c("v0","a_v","m","phi_m"), las = 2)# We can also make a graphical representation of (much of the) the same information using pairs. The “pairs”" plot can be used to get a sense of whether any sampling difficulties are occurring in the tails or near the mode. Here btempptt has an issue. The marginal distribution of each selected parameter is included as a histogram along the diagonal.Ideally, the below-diagonal intersection and the above-diagonal intersection of the same two variables should have distributions that are mirror images of each other. Any yellow points would indicate transitions where the maximum treedepth__ was hit, and red points indicate a divergent transition.
pairs(fit_allsites_via, pars =  c("v0","a_v","m","phi_m"), las = 2)# We can also make a graphical representation of (much of the) the same information using pairs. The “pairs”" plot can be used to get a sense of whether any sampling difficulties are occurring in the tails or near the mode. Here btempptt has an issue. The marginal distribution of each selected parameter is included as a histogram along the diagonal.Ideally, the below-diagonal intersection and the above-diagonal intersection of the same two variables should have distributions that are mirror images of each other. Any yellow points would indicate transitions where the maximum treedepth__ was hit, and red points indicate a divergent transition.
sim_pars <- list(
warmup = 5000,
iter = 30000,
thin = 3,
chains = 3
)
fit_allsites_via <- stan(
file = "/Users/jm200/Library/CloudStorage/Box-Box/Miller Lab/Moutouama Rice University/Forecasting/stan/Code/poar_germination.stan",
data = data_allsites.via,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains,
seed=13)
# saveRDS(fit_allsites_full, 'C:/YOURDIRECTORY')
sim_pars <- list(
warmup = 1000,
iter = 4000,
thin = 3,
chains = 3
)
fit_allsites_via <- stan(
file = "/Users/jm200/Library/CloudStorage/Box-Box/Miller Lab/Moutouama Rice University/Forecasting/stan/Code/poar_germination.stan",
data = data_allsites.via,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains,
seed=13)
# saveRDS(fit_allsites_full, 'C:/YOURDIRECTORY')
data_allsites.via
rm(list = ls())
# load packages
library(rstan)
# set rstan options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(13)
# Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7 -mtune=corei7')
options(tidyverse.quiet = TRUE)
library(tidyverse)
options(dplyr.summarise.inform = FALSE)
library(bayesplot)
# install.packages("countreg",repos = "http://R-Forge.R-project.org")
library(countreg)
library(rmutil)
library(actuar)
library(SPEI)
library(LaplacesDemon)
poar_allsites <- read.csv("https://www.dropbox.com/s/xk4225mn8btqhbm/demography_allsites.csv?dl=1", stringsAsFactors = F)#common garden data
viabVr <- read.csv("https://www.dropbox.com/s/jfkgoxgv8o1fgqx/viability.csv?dl=1") #seed viability and germination
poar_allsites$census.year<-poar_allsites$year-1 #Add census year to match with climate data
summary(poar_allsites)
poar_ppt <- read.csv("/Users/jm200/Library/CloudStorage/Box-Box/Miller Lab/Moutouama Rice University/Forecasting/data/Poa_pr.csv", stringsAsFactors = F) # monthly  precipitation
poar_temp <- read.csv("/Users/jm200/Library/CloudStorage/Box-Box/Miller Lab/Moutouama Rice University/Forecasting/data/Poa_tas.csv", stringsAsFactors = F) # monthly temperature)
poar_ppt$census.year<-ifelse(poar_ppt$month<5,poar_ppt$year-1,poar_ppt$year) # data were collected in May. Thus, the precipitation for the census year is both the precipitation from May to December of the previous year and precipitation of the current year.
poar_temp$census.year<-ifelse(poar_temp$month<5,poar_temp$year-1,poar_temp$year)
poar_ppt %>%
dplyr::select(Longitude, Latitude, census.year, ppt,site,long.scaled,long.center) %>%
filter(census.year %in% (2014:2016)) %>%
group_by(site,census.year) %>%
summarise(mean_ppt=sum(ppt),sd_ppt=sd(ppt),cv_ppt=sd_ppt/mean_ppt,Longitude=unique(Longitude),Latitude=unique(Latitude))->poar_pptann # annual precipitation and seasonality of precipitation seasonality of temperature
poar_temp %>%
dplyr::select(Longitude, Latitude, census.year, temp,site,long.scaled,long.center) %>%
filter(census.year %in% (2014:2016)) %>%
group_by(site,census.year) %>%
summarise(mean_temp = mean(temp),sd_temp=sd(temp),cv_temp=sd_temp/mean_temp,Longitude=unique(Longitude),Latitude=unique(Latitude))->poar_tempann # mean annual temperature and
poar_clim<- merge(x = poar_pptann, y = poar_tempann) # merge temperature and precipitation data
poar_allsites.clim <- left_join(x = poar_allsites ,y =poar_clim,by=c("site","census.year","Longitude","Latitude")) # merge the demographic data with climatic data for each site
poar_allsites.clim$siteyear<-interaction(poar_allsites.clim$site,poar_allsites.clim$census.year) # create a new variable taking into account the year and the climate variable
poar_allsites.clim$siteyear<-as.character(poar_allsites.clim$siteyear)
# Survival
poar_allsites.clim %>%
subset( tillerN_t0 > 0 )%>%
dplyr::select( year, Code, site, Block, Sex,
Longitude, Latitude,
tillerN_t0, surv_t1,mean_ppt,cv_ppt,mean_temp,siteyear)%>%
na.omit %>%
mutate( site         = site %>% as.factor %>% as.numeric,
Block = Block %>% as.factor %>% as.numeric,
Sex          = Sex %>% as.factor %>% as.numeric,
siteyear = siteyear %>% as.factor %>% as.numeric,
source = Code %>% as.factor %>% as.numeric ) %>%
mutate( log_size_t0   = log(tillerN_t0),
log_ppt_t1_z = log(mean_ppt) %>% scale %>% .[,1],
log_cvppt_t1_z = log(cv_ppt) %>% scale %>% .[,1],
log_temp_t1_z = log(mean_temp) %>% scale %>% .[,1])->poar_allsites.surv
# seed viability
viabVr %>%
dplyr::select( plot, totS, yesMaybe, sr_f ) %>%
rename( SR        = sr_f,
y_viab = yesMaybe,
tot_seeds_viab = totS) %>%
dplyr::select(y_viab, tot_seeds_viab, SR ) %>%
na.omit->viab
# seed germination
viabVr %>%
dplyr::select( plot, germTot, germFail, sr_f ) %>%
rename( SR        = sr_f,
y_germ    = germTot ) %>%
mutate(tot_seeds_germ = y_germ + germFail ) %>%
dplyr::select(y_germ, tot_seeds_germ, SR ) %>%
na.omit->germ
# seeds per panicle
viabVr %>%
dplyr::select(SeedN)  %>%
na.omit->seeds
data_allsites.via <- list( n_sites    = poar_allsites.surv$site %>% n_distinct,
n_sources  = poar_allsites.surv$source %>% n_distinct(),
# viability
n_v       = nrow(viab),
y_v       = viab$y_viab,
tot_seeds_v = viab$tot_seeds_viab,
SR_v        = viab$SR,
# germination
n_m       = nrow(germ),
y_m       = germ$y_germ,
tot_seeds_m = germ$tot_seeds_germ,
SR_m        = germ$SR,
# seeds per panicle
n_d = nrow(seeds),
y_d = seeds$SeedN)
sim_pars <- list(
warmup = 5000,
iter = 30000,
thin = 3,
chains = 3
)
fit_allsites_via <- stan(
file = "/Users/jm200/Library/CloudStorage/Box-Box/Miller Lab/Moutouama Rice University/Forecasting/stan/Code/poar_germination.stan",
data = data_allsites.via,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains,
seed=13)
# saveRDS(fit_allsites_full, 'C:/YOURDIRECTORY')
traceplot(fit_allsites_via, pars = c("v0","a_v","m","phi_m"), inc_warmup = TRUE, nrow = 2) # The traceplot method is used to plot the time series of the posterior draws. If we include the warmup draws by setting inc_warmup=TRUE, the background color of the warmup area is different from the post-warmup phase
rm(list = ls())
# load packages
library(rstan)
# set rstan options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(13)
# Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7 -mtune=corei7')
options(tidyverse.quiet = TRUE)
library(tidyverse)
options(dplyr.summarise.inform = FALSE)
library(bayesplot)
# install.packages("countreg",repos = "http://R-Forge.R-project.org")
library(countreg)
library(rmutil)
library(actuar)
library(SPEI)
library(LaplacesDemon)
rm(list = ls())
# load packages
library(rstan)
# set rstan options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(13)
# Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7 -mtune=corei7')
options(tidyverse.quiet = TRUE)
library(tidyverse)
options(dplyr.summarise.inform = FALSE)
library(bayesplot)
# install.packages("countreg",repos = "http://R-Forge.R-project.org")
library(countreg)
library(rmutil)
library(actuar)
library(SPEI)
library(LaplacesDemon)
poar_allsites <- read.csv("https://www.dropbox.com/s/xk4225mn8btqhbm/demography_allsites.csv?dl=1", stringsAsFactors = F)#common garden data
viabVr <- read.csv("https://www.dropbox.com/s/jfkgoxgv8o1fgqx/viability.csv?dl=1") #seed viability and germination
poar_allsites$census.year<-poar_allsites$year-1 #Add census year to match with climate data
summary(poar_allsites)
poar_ppt <- read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR Forecasting/data/Poa_pr.csv", stringsAsFactors = F) # monthly  precipitation
poar_temp <- read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR Forecasting/data/Poa_tas.csv", stringsAsFactors = F) # monthly temperature)
poar_ppt$census.year<-ifelse(poar_ppt$month<5,poar_ppt$year-1,poar_ppt$year) # data were collected in May. Thus, the precipitation for the census year is both the precipitation from May to December of the previous year and precipitation of the current year.
poar_temp$census.year<-ifelse(poar_temp$month<5,poar_temp$year-1,poar_temp$year)
poar_ppt %>%
dplyr::select(Longitude, Latitude, census.year, ppt,site,long.scaled,long.center) %>%
filter(census.year %in% (2014:2016)) %>%
group_by(site,census.year) %>%
summarise(mean_ppt=sum(ppt),sd_ppt=sd(ppt),cv_ppt=sd_ppt/mean_ppt,Longitude=unique(Longitude),Latitude=unique(Latitude))->poar_pptann # annual precipitation and seasonality of precipitation seasonality of temperature
poar_temp %>%
dplyr::select(Longitude, Latitude, census.year, temp,site,long.scaled,long.center) %>%
filter(census.year %in% (2014:2016)) %>%
group_by(site,census.year) %>%
summarise(mean_temp = mean(temp),sd_temp=sd(temp),cv_temp=sd_temp/mean_temp,Longitude=unique(Longitude),Latitude=unique(Latitude))->poar_tempann # mean annual temperature and
poar_clim<- merge(x = poar_pptann, y = poar_tempann) # merge temperature and precipitation data
poar_allsites.clim <- left_join(x = poar_allsites ,y =poar_clim,by=c("site","census.year","Longitude","Latitude")) # merge the demographic data with climatic data for each site
poar_allsites.clim$siteyear<-interaction(poar_allsites.clim$site,poar_allsites.clim$census.year) # create a new variable taking into account the year and the climate variable
poar_allsites.clim$siteyear<-as.character(poar_allsites.clim$siteyear)
# Survival
poar_allsites.clim %>%
subset( tillerN_t0 > 0 )%>%
dplyr::select( year, Code, site, Block, Sex,
Longitude, Latitude,
tillerN_t0, surv_t1,mean_ppt,cv_ppt,mean_temp,siteyear)%>%
na.omit %>%
mutate( site         = site %>% as.factor %>% as.numeric,
Block = Block %>% as.factor %>% as.numeric,
Sex          = Sex %>% as.factor %>% as.numeric,
siteyear = siteyear %>% as.factor %>% as.numeric,
source = Code %>% as.factor %>% as.numeric ) %>%
mutate( log_size_t0   = log(tillerN_t0),
log_ppt_t1_z = log(mean_ppt) %>% scale %>% .[,1],
log_cvppt_t1_z = log(cv_ppt) %>% scale %>% .[,1],
log_temp_t1_z = log(mean_temp) %>% scale %>% .[,1])->poar_allsites.surv
# seed viability
viabVr %>%
dplyr::select( plot, totS, yesMaybe, sr_f ) %>%
rename( SR        = sr_f,
y_viab = yesMaybe,
tot_seeds_viab = totS) %>%
dplyr::select(y_viab, tot_seeds_viab, SR ) %>%
na.omit->viab
# seed germination
viabVr %>%
dplyr::select( plot, germTot, germFail, sr_f ) %>%
rename( SR        = sr_f,
y_germ    = germTot ) %>%
mutate(tot_seeds_germ = y_germ + germFail ) %>%
dplyr::select(y_germ, tot_seeds_germ, SR ) %>%
na.omit->germ
# seeds per panicle
viabVr %>%
dplyr::select(SeedN)  %>%
na.omit->seeds
data_allsites.via <- list( n_sites    = poar_allsites.surv$site %>% n_distinct,
n_sources  = poar_allsites.surv$source %>% n_distinct(),
# viability
n_v       = nrow(viab),
y_v       = viab$y_viab,
tot_seeds_v = viab$tot_seeds_viab,
SR_v        = viab$SR,
# germination
n_m       = nrow(germ),
y_m       = germ$y_germ,
tot_seeds_m = germ$tot_seeds_germ,
SR_m        = germ$SR,
# seeds per panicle
n_d = nrow(seeds),
y_d = seeds$SeedN)
sim_pars <- list(
warmup = 5000,
iter = 30000,
thin = 3,
chains = 3
)
fit_allsites_via <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR Forecasting/viability/poar_germination.stan",
data = data_allsites.via,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains,
seed=13)
sim_pars <- list(
warmup = 5000,
iter = 30000,
thin = 3,
chains = 3
)
sim_pars <- list(
warmup = 1000,
iter = 4000,
thin = 3,
chains = 3
)
fit_allsites_via <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR Forecasting/viability/poar_germination.stan",
data = data_allsites.via,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains,
seed=13)
# saveRDS(fit_allsites_full, 'C:/YOURDIRECTORY')
traceplot(fit_allsites_via, pars = c("v0","a_v","m","phi_m","phi_v","lambda_d"), inc_warmup = TRUE, nrow = 2) # The traceplot method is used to plot the time series of the posterior draws. If we include the warmup draws by setting inc_warmup=TRUE, the background color of the warmup area is different from the post-warmup phase
